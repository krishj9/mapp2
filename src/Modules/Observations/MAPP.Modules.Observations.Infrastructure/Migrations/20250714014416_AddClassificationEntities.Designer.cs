// <auto-generated />
using System;
using MAPP.Modules.Observations.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MAPP.Modules.Observations.Infrastructure.Migrations
{
    [DbContext(typeof(ObservationsDbContext))]
    [Migration("20250714014416_AddClassificationEntities")]
    partial class AddClassificationEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("AttributeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChildName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DomainId")
                        .HasColumnType("integer");

                    b.Property<string>("DomainName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("LearningContext")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ObservationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ObservationText")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ProgressionPointIds")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeacherName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ChildId");

                    b.HasIndex("Created");

                    b.HasIndex("DomainId");

                    b.HasIndex("IsDraft");

                    b.HasIndex("ObservationDate");

                    b.HasIndex("TeacherId");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationArtifact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BucketName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Caption")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("IsUploaded")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("MediaType")
                        .HasColumnType("integer");

                    b.Property<string>("Metadata")
                        .HasColumnType("jsonb");

                    b.Property<int>("ObservationId")
                        .HasColumnType("integer");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PublicUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("StoredFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UploadError")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("UploadedBy")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("DisplayOrder");

                    b.HasIndex("IsUploaded");

                    b.HasIndex("MediaType");

                    b.HasIndex("ObservationId");

                    b.ToTable("ObservationArtifacts");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryInformation")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<int>("DomainId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DomainId");

                    b.HasIndex("IsActive");

                    b.HasIndex("Number");

                    b.HasIndex("SortOrder");

                    b.HasIndex("DomainId", "Number")
                        .IsUnique();

                    b.ToTable("ObservationAttributes", "observations");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("CategoryTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.HasIndex("SortOrder");

                    b.ToTable("ObservationDomains", "observations");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ProgressionPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("integer");

                    b.Property<string>("CategoryInformation")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Order")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("Created");

                    b.HasIndex("IsActive");

                    b.HasIndex("Points");

                    b.HasIndex("SortOrder");

                    b.HasIndex("AttributeId", "SortOrder");

                    b.ToTable("ProgressionPoints", "observations");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.Observation", b =>
                {
                    b.OwnsMany("MAPP.Modules.Observations.Domain.ValueObjects.Tag", "Tags", b1 =>
                        {
                            b1.Property<int>("ObservationId")
                                .HasColumnType("integer");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<string>("NormalizedValue")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.HasKey("ObservationId", "Id");

                            b1.HasIndex("NormalizedValue");

                            b1.ToTable("Tag");

                            b1.WithOwner()
                                .HasForeignKey("ObservationId");
                        });

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationArtifact", b =>
                {
                    b.HasOne("MAPP.Modules.Observations.Domain.Entities.Observation", "Observation")
                        .WithMany("MediaItems")
                        .HasForeignKey("ObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MAPP.Modules.Observations.Domain.ValueObjects.FilePath", "StoragePath", b1 =>
                        {
                            b1.Property<int>("ObservationArtifactId")
                                .HasColumnType("integer");

                            b1.Property<string>("NormalizedValue")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("StoragePathNormalized");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("StoragePath");

                            b1.HasKey("ObservationArtifactId");

                            b1.ToTable("ObservationArtifacts");

                            b1.WithOwner()
                                .HasForeignKey("ObservationArtifactId");
                        });

                    b.OwnsOne("MAPP.Modules.Observations.Domain.ValueObjects.FileSize", "FileSizeBytes", b1 =>
                        {
                            b1.Property<int>("ObservationArtifactId")
                                .HasColumnType("integer");

                            b1.Property<long>("Bytes")
                                .HasColumnType("bigint")
                                .HasColumnName("FileSizeBytes");

                            b1.Property<string>("FormattedSize")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("FileSizeFormatted");

                            b1.HasKey("ObservationArtifactId");

                            b1.ToTable("ObservationArtifacts");

                            b1.WithOwner()
                                .HasForeignKey("ObservationArtifactId");
                        });

                    b.Navigation("FileSizeBytes")
                        .IsRequired();

                    b.Navigation("Observation");

                    b.Navigation("StoragePath")
                        .IsRequired();
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationAttribute", b =>
                {
                    b.HasOne("MAPP.Modules.Observations.Domain.Entities.ObservationDomain", "Domain")
                        .WithMany("Attributes")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ProgressionPoint", b =>
                {
                    b.HasOne("MAPP.Modules.Observations.Domain.Entities.ObservationAttribute", "Attribute")
                        .WithMany("ProgressionPoints")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.Observation", b =>
                {
                    b.Navigation("MediaItems");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationAttribute", b =>
                {
                    b.Navigation("ProgressionPoints");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationDomain", b =>
                {
                    b.Navigation("Attributes");
                });
#pragma warning restore 612, 618
        }
    }
}
