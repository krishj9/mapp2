// <auto-generated />
using System;
using MAPP.Modules.Observations.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MAPP.Modules.Observations.Infrastructure.Migrations
{
    [DbContext(typeof(ObservationsDbContext))]
    [Migration("20250712183908_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.Observation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTimeOffset?>("ObservedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ObserverId")
                        .HasMaxLength(450)
                        .HasColumnType("character varying(450)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("Created");

                    b.HasIndex("Location");

                    b.HasIndex("ObservedAt");

                    b.HasIndex("ObserverId");

                    b.HasIndex("Status");

                    b.ToTable("Observations");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("LastModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("text");

                    b.Property<int>("ObservationId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObservationId");

                    b.HasIndex("ObservationId", "Key");

                    b.ToTable("ObservationData");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.Observation", b =>
                {
                    b.OwnsOne("MAPP.Modules.Observations.Domain.ValueObjects.Priority", "Priority", b1 =>
                        {
                            b1.Property<int>("ObservationId")
                                .HasColumnType("integer");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)")
                                .HasColumnName("PriorityName");

                            b1.Property<int>("Value")
                                .HasColumnType("integer")
                                .HasColumnName("Priority");

                            b1.HasKey("ObservationId");

                            b1.ToTable("Observations");

                            b1.WithOwner()
                                .HasForeignKey("ObservationId");
                        });

                    b.Navigation("Priority")
                        .IsRequired();
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.ObservationData", b =>
                {
                    b.HasOne("MAPP.Modules.Observations.Domain.Entities.Observation", "Observation")
                        .WithMany("Data")
                        .HasForeignKey("ObservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Observation");
                });

            modelBuilder.Entity("MAPP.Modules.Observations.Domain.Entities.Observation", b =>
                {
                    b.Navigation("Data");
                });
#pragma warning restore 612, 618
        }
    }
}
