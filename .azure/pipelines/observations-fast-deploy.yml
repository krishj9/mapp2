trigger:
  branches:
    include:
    - main
  paths:
    include:
    - src/Modules/Observations/**
    - src/Services/MAPP.Services.Observations/**
    - src/BuildingBlocks/**

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '9.0.x'
  
  # GCP Configuration
  gcpProjectId: 'mapp-dev-457512'
  gcpRegion: 'us-central1'
  artifactRegistryRepo: 'mapp-docker-repo'
  cloudRunService: 'cr-observations'
  
  # Docker Configuration
  dockerImageName: 'observations-api'
  dockerTag: '$(Build.BuildNumber)'
  fullImageName: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectId)/$(artifactRegistryRepo)/$(dockerImageName):$(dockerTag)'

stages:
- stage: BuildAndDeploy
  displayName: 'Fast Build and Deploy'
  jobs:
  - job: BuildAndDeploy
    displayName: 'Build and Deploy to Cloud Run'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET $(dotNetVersion)'
      inputs:
        version: '$(dotNetVersion)'

    # Download GCP Service Account Key
    - task: DownloadSecureFile@1
      name: gcpServiceAccount
      displayName: 'Download GCP Service Account Key'
      inputs:
        secureFile: 'mapp-dev-457512-service-account.json'

    # Use Google Cloud CLI task (faster than manual installation)
    - task: GoogleCloudSdkTool@0
      displayName: 'Install Google Cloud SDK'
      inputs:
        version: 'latest'

    # Authenticate with GCP (faster method)
    - script: |
        # Authenticate with service account
        gcloud auth activate-service-account --key-file=$(gcpServiceAccount.secureFilePath)
        gcloud config set project $(gcpProjectId)
        
        # Configure Docker authentication
        gcloud auth configure-docker $(gcpRegion)-docker.pkg.dev --quiet
        
        echo "‚úÖ GCP authentication completed"
      displayName: 'Authenticate with GCP'

    # Build .NET Application
    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: 'src/Services/MAPP.Services.Observations/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Application'
      inputs:
        command: 'build'
        projects: 'src/Services/MAPP.Services.Observations/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Build and Push Docker Image using Docker task
    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        command: 'build'
        dockerfile: 'src/Services/MAPP.Services.Observations/Dockerfile'
        buildContext: '.'
        repository: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectId)/$(artifactRegistryRepo)/$(dockerImageName)'
        tags: '$(dockerTag)'

    - task: Docker@2
      displayName: 'Push to Artifact Registry'
      inputs:
        command: 'push'
        repository: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectId)/$(artifactRegistryRepo)/$(dockerImageName)'
        tags: '$(dockerTag)'

    # Deploy to Cloud Run
    - script: |
        echo "üöÄ Deploying to Cloud Run..."
        
        gcloud run deploy $(cloudRunService) \
          --image $(fullImageName) \
          --platform managed \
          --region $(gcpRegion) \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars="ASPNETCORE_ENVIRONMENT=Production,DATABASE_CONNECTION_STRING=$(DATABASE_CONNECTION_STRING),PubSub__ProjectId=$(gcpProjectId),PubSub__EnablePublishing=true,PubSub__EnableConsuming=true" \
          --quiet
        
        # Get service URL
        SERVICE_URL=$(gcloud run services describe $(cloudRunService) --region=$(gcpRegion) --format='value(status.url)')
        echo "‚úÖ Deployment completed!"
        echo "üåê Service URL: $SERVICE_URL"
        echo "##vso[task.setvariable variable=serviceUrl;isOutput=true]$SERVICE_URL"
      displayName: 'Deploy to Cloud Run'
      name: deployToCloudRun

    # Quick health check
    - script: |
        SERVICE_URL=$(deployToCloudRun.serviceUrl)
        echo "üß™ Testing service at: $SERVICE_URL"
        
        # Wait a moment for service to be ready
        sleep 10
        
        # Test health endpoint
        if curl -f "$SERVICE_URL/health" --max-time 30; then
          echo "‚úÖ Health check passed"
        else
          echo "‚ö†Ô∏è Health check failed - service may still be starting"
        fi
      displayName: 'Test Deployed Service'
