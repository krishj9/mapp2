trigger:
  branches:
    include:
    - main
    - develop
  paths:
    exclude:
    - README.md
    - docs/**

variables:
  buildConfiguration: 'Release'
  dotNetFramework: 'net9.0'
  dotNetVersion: '9.0.x'
  nodeVersion: '20.x'
  pythonVersion: '3.11'

stages:
- stage: Build
  displayName: 'Build Full MAPP Solution'
  jobs:
  - job: BuildSolution
    displayName: 'Build Complete Solution'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET $(dotNetVersion)'
      inputs:
        version: '$(dotNetVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Solution'
      inputs:
        command: 'restore'
        projects: '**/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '**/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Test Solution'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Main AppHost'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'orchestration/MAPP.AppHost/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/main-apphost'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Main AppHost Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/main-apphost'
        artifactName: 'main-apphost'

  - job: BuildAllPython
    displayName: 'Build All Python AI Services'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        for service in planning-ai observations-ai reports-ai; do
          echo "Building $service..."
          cd src/Services/genai/$service
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m py_compile main.py
          cd ../../../../
        done
      displayName: 'Build All Python AI Services'

  - job: BuildAllAngular
    displayName: 'Build All Angular MFEs'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'

    - script: |
        for mfe in shell planning-mfe observations-mfe usermanagement-mfe reports-mfe; do
          echo "Building $mfe..."
          cd src/Web/$mfe
          npm ci
          npm run build --prod
          cd ../../../
        done
      displayName: 'Build All Angular MFEs'

- stage: IntegrationTests
  displayName: 'Integration Tests'
  dependsOn: Build
  jobs:
  - job: RunIntegrationTests
    displayName: 'Run Integration Tests'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET $(dotNetVersion)'
      inputs:
        version: '$(dotNetVersion)'

    - script: |
        echo "Running integration tests across all domains..."
        # Add integration test commands here
        echo "Integration tests completed successfully"
      displayName: 'Run Cross-Domain Integration Tests'

- stage: Deploy_Staging
  displayName: 'Deploy Full Solution to Staging'
  dependsOn: [Build, IntegrationTests]
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployFullSolutionStaging
    displayName: 'Deploy Complete MAPP Solution to Staging'
    environment: 'mapp-staging'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying full MAPP solution to staging environment..."
              echo "This would orchestrate deployment of all domains"
            displayName: 'Deploy Full Solution'

- stage: Deploy_Production
  displayName: 'Deploy Full Solution to Production'
  dependsOn: [Build, IntegrationTests]
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployFullSolutionProduction
    displayName: 'Deploy Complete MAPP Solution to Production'
    environment: 'mapp-production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              echo "Deploying full MAPP solution to production environment..."
              echo "This would orchestrate deployment of all domains"
            displayName: 'Deploy Full Solution'
