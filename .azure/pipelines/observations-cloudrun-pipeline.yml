trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - src/Modules/Observations/**
    - src/Services/MAPP.Services.Observations/**
    - src/BuildingBlocks/**

variables:
  buildConfiguration: 'Release'
  dotNetFramework: 'net9.0'
  dotNetVersion: '9.0.x'
  
  # GCP Configuration
  gcpProjectId: 'mapp-dev-457512'
  gcpRegion: 'us-central1'
  artifactRegistryRepo: 'mapp-docker-repo'
  cloudRunService: 'cr-observations'
  
  # Docker Configuration
  dockerImageName: 'observations-api'
  dockerTag: '$(Build.BuildNumber)'
  fullImageName: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectId)/$(artifactRegistryRepo)/$(dockerImageName):$(dockerTag)'

stages:
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: BuildAndPush
    displayName: 'Build .NET API and Push to Artifact Registry'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET $(dotNetVersion)'
      inputs:
        version: '$(dotNetVersion)'

    # Authenticate with GCP using service account
    - task: DownloadSecureFile@1
      name: gcpServiceAccount
      displayName: 'Download GCP Service Account Key'
      inputs:
        secureFile: 'mapp-dev-457512-service-account.json'

    - script: |
        # Set up GCP authentication
        export GOOGLE_APPLICATION_CREDENTIALS=$(gcpServiceAccount.secureFilePath)
        
        # Install gcloud CLI
        curl https://sdk.cloud.google.com | bash > /dev/null
        source $HOME/google-cloud-sdk/path.bash.inc
        
        # Authenticate with GCP
        gcloud auth activate-service-account --key-file=$(gcpServiceAccount.secureFilePath)
        gcloud config set project $(gcpProjectId)
        
        # Configure Docker for Artifact Registry
        gcloud auth configure-docker $(gcpRegion)-docker.pkg.dev
        
        echo "GCP authentication completed"
      displayName: 'Authenticate with GCP'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: 'src/Services/MAPP.Services.Observations/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Application'
      inputs:
        command: 'build'
        projects: 'src/Services/MAPP.Services.Observations/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: 'src/Modules/Observations/**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'
      continueOnError: true

    - script: |
        # Set up GCP authentication for Docker
        export GOOGLE_APPLICATION_CREDENTIALS=$(gcpServiceAccount.secureFilePath)
        source $HOME/google-cloud-sdk/path.bash.inc
        
        # Build Docker image
        echo "Building Docker image: $(fullImageName)"
        docker build -f src/Services/MAPP.Services.Observations/Dockerfile -t $(fullImageName) .
        
        # Push to Artifact Registry
        echo "Pushing image to Artifact Registry..."
        docker push $(fullImageName)
        
        echo "Image pushed successfully: $(fullImageName)"
      displayName: 'Build and Push Docker Image'

    - script: |
        echo "##vso[task.setvariable variable=imageUri;isOutput=true]$(fullImageName)"
      name: setImageUri
      displayName: 'Set Image URI for Deployment'

- stage: Deploy_Staging
  displayName: 'Deploy to Cloud Run Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  variables:
    imageUri: $[ stageDependencies.Build.BuildAndPush.outputs['setImageUri.imageUri'] ]
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy to Cloud Run Staging'
    environment: 'observations-staging'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            name: gcpServiceAccount
            displayName: 'Download GCP Service Account Key'
            inputs:
              secureFile: 'mapp-dev-457512-service-account.json'

          - script: |
              # Set up GCP authentication
              export GOOGLE_APPLICATION_CREDENTIALS=$(gcpServiceAccount.secureFilePath)
              source $HOME/google-cloud-sdk/path.bash.inc
              gcloud auth activate-service-account --key-file=$(gcpServiceAccount.secureFilePath)
              gcloud config set project $(gcpProjectId)
              
              # Deploy to Cloud Run
              gcloud run deploy $(cloudRunService)-staging \
                --image $(imageUri) \
                --platform managed \
                --region $(gcpRegion) \
                --allow-unauthenticated \
                --port 8080 \
                --memory 1Gi \
                --cpu 1 \
                --min-instances 0 \
                --max-instances 10 \
                --set-env-vars="ASPNETCORE_ENVIRONMENT=Staging,ConnectionStrings__DefaultConnection=$(STAGING_DB_CONNECTION)" \
                --quiet
              
              echo "Staging deployment completed"
            displayName: 'Deploy to Cloud Run Staging'

- stage: Deploy_Production
  displayName: 'Deploy to Cloud Run Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
    imageUri: $[ stageDependencies.Build.BuildAndPush.outputs['setImageUri.imageUri'] ]
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy to Cloud Run Production'
    environment: 'observations-production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadSecureFile@1
            name: gcpServiceAccount
            displayName: 'Download GCP Service Account Key'
            inputs:
              secureFile: 'mapp-dev-457512-service-account.json'

          - script: |
              # Set up GCP authentication
              export GOOGLE_APPLICATION_CREDENTIALS=$(gcpServiceAccount.secureFilePath)
              source $HOME/google-cloud-sdk/path.bash.inc
              gcloud auth activate-service-account --key-file=$(gcpServiceAccount.secureFilePath)
              gcloud config set project $(gcpProjectId)
              
              # Deploy to Cloud Run
              gcloud run deploy $(cloudRunService) \
                --image $(imageUri) \
                --platform managed \
                --region $(gcpRegion) \
                --allow-unauthenticated \
                --port 8080 \
                --memory 2Gi \
                --cpu 2 \
                --min-instances 1 \
                --max-instances 20 \
                --set-env-vars="ASPNETCORE_ENVIRONMENT=Production,ConnectionStrings__DefaultConnection=$(PRODUCTION_DB_CONNECTION)" \
                --quiet
              
              # Get the service URL
              SERVICE_URL=$(gcloud run services describe $(cloudRunService) --region=$(gcpRegion) --format='value(status.url)')
              echo "Production deployment completed. Service URL: $SERVICE_URL"
              echo "##vso[task.setvariable variable=serviceUrl;isOutput=true]$SERVICE_URL"
            displayName: 'Deploy to Cloud Run Production'
            name: deployProduction
