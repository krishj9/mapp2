# Trigger disabled - using observations-minimal.yml instead
trigger: none

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '9.0.x'

  # GCP Configuration
  gcpProjectId: 'mapp-dev-457512'
  gcpRegion: 'us-central1'
  artifactRegistryRepo: 'mapp-docker-repo'
  cloudRunService: 'cr-observations'

  # Docker Configuration
  dockerImageName: 'observations-api'
  dockerTag: '$(Build.BuildNumber)'
  fullImageName: '$(gcpRegion)-docker.pkg.dev/$(gcpProjectId)/$(artifactRegistryRepo)/$(dockerImageName):$(dockerTag)'

  # Database Configuration (set this as a secret variable in the pipeline)
  # DATABASE_CONNECTION_STRING: 'Host=YOUR_IP;Database=worldplanning;Username=YOUR_USER;Password=YOUR_PASSWORD;SSL Mode=Require'

stages:
- stage: BuildAndDeploy
  displayName: 'Build and Deploy to Cloud Run'
  jobs:
  - job: BuildAndDeploy
    displayName: 'Build .NET API and Deploy to Cloud Run'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET $(dotNetVersion)'
      inputs:
        version: '$(dotNetVersion)'

    # Download GCP Service Account Key
    - task: DownloadSecureFile@1
      name: gcpServiceAccount
      displayName: 'Download GCP Service Account Key'
      inputs:
        secureFile: 'mapp-dev-457512-service-account.json'

    # Install gcloud CLI (faster method)
    - script: |
        # Use pre-installed gcloud or install quickly
        if ! command -v gcloud &> /dev/null; then
          echo "Installing gcloud CLI..."
          curl -sSL https://sdk.cloud.google.com | bash -s -- --disable-prompts --install-dir=$HOME
          export PATH="$HOME/google-cloud-sdk/bin:$PATH"
        fi

        # Verify gcloud installation
        gcloud version
        echo "gcloud CLI ready"
      displayName: 'Install gcloud CLI'

    # Authenticate with GCP
    - script: |
        export PATH="$HOME/google-cloud-sdk/bin:$PATH"

        # Authenticate with GCP using service account
        gcloud auth activate-service-account --key-file=$(gcpServiceAccount.secureFilePath)
        gcloud config set project $(gcpProjectId)

        # Configure Docker for Artifact Registry
        gcloud auth configure-docker $(gcpRegion)-docker.pkg.dev --quiet

        echo "‚úÖ GCP authentication completed"
      displayName: 'Authenticate with GCP'

    # Build .NET Application
    - task: DotNetCoreCLI@2
      displayName: 'Restore Dependencies'
      inputs:
        command: 'restore'
        projects: 'src/Services/MAPP.Services.Observations/*.csproj'

    - task: DotNetCoreCLI@2
      displayName: 'Build Application'
      inputs:
        command: 'build'
        projects: 'src/Services/MAPP.Services.Observations/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # Build and Push Docker Image
    - script: |
        export PATH="$HOME/google-cloud-sdk/bin:$PATH"

        # Build Docker image
        echo "üê≥ Building Docker image: $(fullImageName)"
        docker build -f src/Services/MAPP.Services.Observations/Dockerfile -t $(fullImageName) . --quiet

        # Push to Artifact Registry
        echo "üì¶ Pushing image to Artifact Registry..."
        docker push $(fullImageName)

        echo "‚úÖ Image pushed successfully: $(fullImageName)"
      displayName: 'Build and Push Docker Image'

    # Deploy to Cloud Run
    - script: |
        export PATH="$HOME/google-cloud-sdk/bin:$PATH"

        echo "üöÄ Deploying to Cloud Run service: $(cloudRunService)"

        # Deploy to Cloud Run
        gcloud run deploy $(cloudRunService) \
          --image $(fullImageName) \
          --platform managed \
          --region $(gcpRegion) \
          --allow-unauthenticated \
          --port 8080 \
          --memory 2Gi \
          --cpu 2 \
          --min-instances 0 \
          --max-instances 10 \
          --set-env-vars="ASPNETCORE_ENVIRONMENT=Production,DATABASE_CONNECTION_STRING=$(DATABASE_CONNECTION_STRING),PubSub__ProjectId=$(gcpProjectId),PubSub__EnablePublishing=true,PubSub__EnableConsuming=true" \
          --quiet

        # Get the service URL
        SERVICE_URL=$(gcloud run services describe $(cloudRunService) --region=$(gcpRegion) --format='value(status.url)')
        echo "‚úÖ Deployment completed successfully!"
        echo "üåê Service URL: $SERVICE_URL"
        echo "##vso[task.setvariable variable=serviceUrl;isOutput=true]$SERVICE_URL"
      displayName: 'Deploy to Cloud Run'
      name: deployToCloudRun

    # Test the deployed service
    - script: |
        SERVICE_URL=$(deployToCloudRun.serviceUrl)
        echo "Testing deployed service at: $SERVICE_URL"
        
        # Test health endpoint
        curl -f "$SERVICE_URL/health" || echo "Health check failed"
        
        # Test Swagger endpoint
        curl -f "$SERVICE_URL/swagger" || echo "Swagger endpoint test failed"
        
        echo "Deployment testing completed"
      displayName: 'Test Deployed Service'
