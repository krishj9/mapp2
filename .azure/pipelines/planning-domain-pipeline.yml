trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - src/Modules/Planning/**
    - src/Services/MAPP.Services.Planning/**
    - src/Services/genai/planning-ai/**
    - src/Web/planning-mfe/**
    - orchestration/MAPP.Planning.AppHost/**

variables:
  buildConfiguration: 'Release'
  dotNetFramework: 'net9.0'
  dotNetVersion: '9.0.x'
  nodeVersion: '20.x'
  pythonVersion: '3.11'

stages:
- stage: Build
  displayName: 'Build Planning Domain'
  jobs:
  - job: BuildDotNet
    displayName: 'Build .NET Components'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET $(dotNetVersion)'
      inputs:
        version: '$(dotNetVersion)'

    - task: DotNetCoreCLI@2
      displayName: 'Restore Planning Domain'
      inputs:
        command: 'restore'
        projects: |
          src/Modules/Planning/**/*.csproj
          src/Services/MAPP.Services.Planning/*.csproj
          orchestration/MAPP.Planning.AppHost/*.csproj

    - task: DotNetCoreCLI@2
      displayName: 'Build Planning Domain'
      inputs:
        command: 'build'
        projects: |
          src/Modules/Planning/**/*.csproj
          src/Services/MAPP.Services.Planning/*.csproj
          orchestration/MAPP.Planning.AppHost/*.csproj
        arguments: '--configuration $(buildConfiguration) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: 'Test Planning Domain'
      inputs:
        command: 'test'
        projects: 'src/Modules/Planning/**/*Tests.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build --collect:"XPlat Code Coverage"'

    - task: DotNetCoreCLI@2
      displayName: 'Publish Planning API'
      inputs:
        command: 'publish'
        publishWebProjects: false
        projects: 'src/Services/MAPP.Services.Planning/*.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/planning-api'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Planning API Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/planning-api'
        artifactName: 'planning-api'

  - job: BuildPython
    displayName: 'Build Python AI Service'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UsePythonVersion@0
      displayName: 'Use Python $(pythonVersion)'
      inputs:
        versionSpec: '$(pythonVersion)'

    - script: |
        cd src/Services/genai/planning-ai
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python -m py_compile main.py
      displayName: 'Install dependencies and compile Python'

    - task: ArchiveFiles@2
      displayName: 'Archive Python AI Service'
      inputs:
        rootFolderOrFile: 'src/Services/genai/planning-ai'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/planning-ai.zip'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Python AI Artifacts'
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)/planning-ai.zip'
        artifactName: 'planning-ai'

  - job: BuildAngular
    displayName: 'Build Angular MFE'
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node $(nodeVersion)'
      inputs:
        versionSpec: '$(nodeVersion)'

    - script: |
        cd src/Web/planning-mfe
        npm ci
        npm run build --prod
      displayName: 'Build Angular MFE'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Angular MFE Artifacts'
      inputs:
        pathToPublish: 'src/Web/planning-mfe/dist'
        artifactName: 'planning-mfe'

- stage: Deploy_Staging
  displayName: 'Deploy to Staging'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployStaging
    displayName: 'Deploy Planning Domain to Staging'
    environment: 'planning-staging'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'all'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy Planning API to Azure'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'mapp-planning-api-staging'
              package: '$(System.ArtifactsDirectory)/planning-api'

          - task: AzureFunctionApp@1
            displayName: 'Deploy Planning AI to Azure Functions'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionApp'
              appName: 'mapp-planning-ai-staging'
              package: '$(System.ArtifactsDirectory)/planning-ai.zip'

- stage: Deploy_Production
  displayName: 'Deploy to Production'
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployProduction
    displayName: 'Deploy Planning Domain to Production'
    environment: 'planning-production'
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download Artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'all'
              downloadPath: '$(System.ArtifactsDirectory)'

          - task: AzureWebApp@1
            displayName: 'Deploy Planning API to Production'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'webApp'
              appName: 'mapp-planning-api-prod'
              package: '$(System.ArtifactsDirectory)/planning-api'

          - task: AzureFunctionApp@1
            displayName: 'Deploy Planning AI to Production'
            inputs:
              azureSubscription: '$(azureSubscription)'
              appType: 'functionApp'
              appName: 'mapp-planning-ai-prod'
              package: '$(System.ArtifactsDirectory)/planning-ai.zip'
